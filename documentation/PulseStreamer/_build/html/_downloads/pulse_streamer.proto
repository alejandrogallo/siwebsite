syntax = "proto3";

package pulse_streamer;

message VoidMessage {}

message RegisterMessage {
    uint32 value = 1;
    uint32 mask = 2;
}

message PulseMessage {
    uint32 ticks = 1;
    uint32 digi = 2;
    int32 ao0 = 3;
    int32 ao1 = 4;
}

message SequenceMessage {
    repeated PulseMessage pulse = 1;
    int64 n_runs = 2;
    PulseMessage initial = 3;
    PulseMessage final = 4;
    PulseMessage underflow = 5;
    enum Start {
        IMMEDIATE = 0;
        SOFTWARE = 1;
        HARDWARE = 2;
      }
    Start start = 6;
}

message TriggerMessage {
    enum Edge {
        RISING = 0;
        FALLING = 1;
        BOTH = 2;
      }
    Edge edge = 1;
}

message PulseStreamerReply {
    uint32 value = 1;
}

service PulseStreamer {
    rpc constant (PulseMessage) returns (PulseStreamerReply) {}
    rpc stream (SequenceMessage) returns (PulseStreamerReply) {}
    rpc startNow (VoidMessage) returns (PulseStreamerReply) {}
    rpc setTrigger (TriggerMessage) returns (PulseStreamerReply) {}
    rpc isRunning (VoidMessage) returns (PulseStreamerReply) {}
    rpc hasSequence (VoidMessage) returns (PulseStreamerReply) {}
    rpc getUnderflow (VoidMessage) returns (PulseStreamerReply) {}
    rpc getDebugRegister (VoidMessage) returns (PulseStreamerReply) {}
    rpc setDebugRegister (RegisterMessage) returns (PulseStreamerReply) {}
}
