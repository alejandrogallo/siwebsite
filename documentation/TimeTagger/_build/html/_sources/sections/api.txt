.. _api:

**********************************
Application Programmer's Interface
**********************************


Overview
========

The API provides methods to control the hardware and to create
measurements that are hooked onto the time tag stream. It is written in C++ but
wrapper classes for higher level languages (python, Matlab, LabView)
are provided, such that the C++ API can directly be used in your application,
in a way that is equivalent to the C++ classes.
The API includes a set of typical measurements that will most likely
cover your needs. Implementation of custom measurements is based on
subclassing from a C++ base class and thus is only available in the C++ API.


API documentation
-----------------

The API documentation in this manual gives a general overview how to use the *TimeTagger 20*.

Examples
--------

Often the fastest way to learn how to use an API is by means of examples. Please see the ``\examples``
subfolder of your *TimeTagger 20* installation for examples.


Units
-----


Time is measured in ps since device startup and represented by 64 bit integers. Note that this
implies that the time variable will rollover once after about 0.83 years. This
will most likely not be relevant to you unless you plan to run your software
continuously over one year and are taking data at the instance when the rollover is happening.


Channel Numbers
---------------

You can use the *TimeTagger 20* to detect both rising and falling edges. Throughout
the software API, the rising edges are represented by channels 0 to 7 and
the falling edges are represented by channel numbers 8 to 15. Virtual channels will obtain numbers
from 16 onwards.

Undefined Channels
------------------
There might be the need to leave a parameter undefined when calling a class constructor. 
Depending on the programming language you are using you pass an undefined channel via the  
static constant ``CHANNEL_UNDEFINED`` which can be found in the ``TT`` class for .net and
in the ``TimeTagger`` class in Matlab.


Organization
============


The API contains a *small* number of **classes** which you instantiate in your code.
These **classes** are summarized below.


Hardware
--------
TimeTagger
  Represents the hardware and provides methods to control the trigger levels, input delay, dead time, event filter and test signals.

Virtual Channels
----------------
Combiner
  Combines two channels into one
Coincidences
  Detects coincidence clicks on two or more channels within a given window

Measurements
------------
Correlation 
  auto- and cross-correlation.
CountBetweenMarkers 
  Counts tags on one channel where the bins are
  determined by triggers on one or two other channels. Uses static buffer
  output. Use this to implement a gated counter, a counter synchronized to
  an external sampling clock, etc.
Counter 
  Counts clicks on one or more channels with a fixed binwidth and
  circular buffer output.
Countrate 
  Average tag rate on one or more channels.
FLIM 
  Fluorescence lifetime imaging.
Iterator
  Base class for implementing custom measurements.
Histogram
  A simple histogram of time differences. This can be used e.g.
  to measure lifetime.
StartStop 
  Accumulates a histogram of time difference between
  pairs of tags on two channels. Only the first stop tag after a start tag is
  considered. Subsequent stop tags are discarded. The Histogram length is
  unlimited.
TimeDifferences 
  Accumulates the time differences between tags on two
  channels in one or more histograms. The sweeping through
  histograms is optionally controlled by one or two additional triggers.
  

The TimeTagger class
====================


This class provides access to the hardware and exposes methods to control hardware settings.
Behind the scenes it opens the USB connection, initializes the device
and receives the time tag stream. Every measurement requires an
instance of the TimeTagger class to which it will be associated. In a typical application
you will perform the following steps:

#. create an instance of TimeTagger
#. use methods on the instance of TimeTagger to adjust the trigger levels
#. create an instance of a measurement passing the instance of TimeTagger to the constructor

You can use multiple TimeTaggers on one computer simultaneously. In this case, you usually want to
associate your instance of the TimeTagger class to a physical TimeTagger. To
implement this in a bullet proof way, TimeTagger instances must be created
with a factory function called 'createTimeTagger'. The factory function accepts
the serial number of a physical TimeTagger as a string argument (every
TimeTagger has a unique hardware serial number). The serial number is the only argument that can
be passed. If an empty string or no argument is passed, the first detected
TimeTagger will be used. To find out the hardware serial number, you can connect
a single TimeTagger, open it and use the 'getSerial' function described below.

The TimeTagger class contains a small number of methods to control the hardware settings that are summarized below.


Methods
-------

reset()
  reset the TimeTagger to the startup state
setTriggerLevel(unsigned int channel, double voltage)
  set the trigger level of an input channel in volts
double getTriggerLevel(unsigned int channel)
  return the trigger level of an input channel in volts
setInputDelay(unsigned int channel, long long delay)
  set the input delay of a channel in picoseconds
long long getInputDelay(unsigned int channel)
  return the input delay of a channel in picoseconds
setFilter(bool state)
  enable or disable the event filter on the FPGA board. If the filter
  is active, tags on channel 7 are only transmitted if they were
  immediately preceded by a tag on channel 0.
bool getFilter()
  returns true if the event filter on the FPGA board is enabled
setNormalization(bool state)
  enables or disable Gaussian normalization of the
  detection jitter. Enabled by default.
bool getNormalization()
  returns true if Gaussian normalization is enabled.
long long setDeadTime(unsigned int channel, long long deadtime)
  sets the dead time of a channel in picoseconds. The requested time will
  be rounded to the nearest multiple of the clock time. The deadtime will also
  be clamped to device specific limitations. As the actual deadtime will
  be altered, the real value will be returned.
long long getDeadTime(unsigned int channel)
  returns the dead time of a channel in picoseconds
setTestSignal(unsigned int, bool state)
  This will connect or disconnect the channel with the on-chip
  uncorrelated signal generator.
bool getTestSignal(unsigned int channel)
  returns true if the internal test signal is activated on the specified channel
string getSerial()
  returns the hardware serial number
long long getOverflows()
  returns the number of overflows that occurred since startup
long long getOverflowsAndClear()
  returns the number of overflows that occurred since startup and sets them to zero
clearOverflows()
  set the overflow counter to zero
sync()
  ensure that all hardware settings such as trigger levels,
  channel registrations, etc., have propagated to the FPGA
  and are physically active and synchronize the TimeTagger pipeline,
  so that all tags arriving after a sync call were actually produced
  after the sync call. The sync function waits until all historic
  tags in the pipeline are processed.
  
Debug Methods
-------------

int getBoardModel()
  returns the hardware type
registerChannel(unsigned int channel)
  enable transmissions of time tags on the specified channel
unregisterChannel(unsigned int channel)
  disable transmissions of time tags on the specified channel
unsigned int getChannels()
  returns the number of registered channels
autoCalibration(bool verbose=true)
  run an auto calibration of the tagger hardware using the built in test signal
2D array long long getDistributionCount()
  returns the calibration data represented in counts
2D array long long getDistributionPSec()
  returns the calibration data in picoseconds
long long getPsPerClock()
  returns the the duration of a clock cycle in picoseconds

Measurement Classes
===================

The library includes a number of common measurements that will be described in this section.
All measurements are derived from a base class called 'Iterator' that is described further down.
As the name suggests, it uses the `iterator` programming concept.

All measurements provide a small number of methods to start and stop the execution
and to access the accumulated data. The methods are summarized below.


Methods common to all Measurements
----------------------------------

getData() 
  Returns the data accumulated up to now. The returned data can be a scalar, vector or array,
  depending on the measurement.
clear() 
  reset the accumulated data to an array filled with zeros
start()
  start data acquisition
stop() 
  stop data acquisition


.. attention:: All measurements start accumulating data immediately after their creation.

In a typical application you will perform the following steps:

#. create an instance of a measurement, e.g.~a countrate on channel 0
#. wait for some time
#. retrieve the data accumulated by the measurement up to now by calling the 'getData' method.

The specific measurements are described below.


Correlation
-----------


Accumulates time differences between clicks on two channels into
a histogram, where all ticks are considered both as start and stop
clicks and both positive and negative time differences are considered.



Arguments
^^^^^^^^^



tagger
  <reference> reference to a time tagger
channel 1
  <int> first channel
channel 2
  <int> second channel
binwidth
  <longlong> binwidth in ps
n_bins
  <int> the number of bins in the resulting histogram




Methods
^^^^^^^

getData() 
  returns a one-dimensional array of size 2*n_bins+1 containing the histograms.
getIndex() 
  returns a vector of size 'n_bins' containing the time bins in ps.
clear()
  resets the array to zero.
setMaxCounts() 
  set the maximum number of start tags accepted
getCounts() 
  returns the number of start tags
ready() 
  returns 'true' when the required number of start tags set by 'setMaxCounts' has been reached
  


CountBetweenMarkers
-------------------

Countrate on a single channel. The bin edges between which counts are accumulated
are determined by one or more hardware triggers. Specifically, the measurement records data into a vector of length 'n_values' (initially filled with zeros).
It waits for tags on the 'begin_channel'. When a tag is detected on the 'begin_channel' it starts counting tags
on the 'click_channel'. When the next tag is detected on the 'begin_channel' it stores the current counter value as next entry in the data vector,
resets the counter to zero and starts accumulating counts again. If an 'end_channel' is specified, the measurement stores the current counter value and resets the counter
when a tag is detected on the 'end_channel' rather than the 'begin_channel'. You can use this e.g., to accumulate counts within a gate by using
rising edges on one channel as the 'begin_channel' and falling edges on the same channel as the 'end_channel'. The measurement stops when all
entries in the data vector are filled.


Arguments
^^^^^^^^^

tagger
  <reference> reference to a time tagger
begin_channel
  <int> channel that triggers beginning of counting and stepping to the next value
end_channel
  <int> channel that triggers end of counting
n_values
  <int> number of values


Methods
^^^^^^^

getData() 
  returns an array of size 'n_values' containing the acquired counter values.
getIndex() 
  returns a vector of size 'n_values' containing the time bins in ps.
clear()
  resets the array to zero and restarts the measurement.
ready() 
  returns 'true' when the entire array is filled.



  
  
Counter
-------

Time trace of the countrate on one or more channels. Specifically
this measurement repeatedly counts tags on one or more channels within a
time interval 'binwidth' and stores the results in a two dimensional array of size
'number of channels' times 'n_values'. The array is treated as a circular buffer that is,
all values in the array are shifted by on position when a new value is generated. The
last entry in the array is always the most recent value.


Arguments
^^^^^^^^^


tagger
  <reference> reference to a time tagger
channels 
  <vector int> channels used for counting tags
binwidth 
  <longlong> binwidth in ps
n_values
  <int> number of values




Methods
^^^^^^^


getData() 
  returns an array of size 'number of channels' times 'n_values' containing the current values of the circular buffer
  (counts in each bin).
getIndex() 
  returns a vector of size 'n_values' containing the time bins in ps.
clear()
  resets the array to zero and restarts the measurement.
  
  
Countrate
---------


Measures the average countrate on one or more channels. Specifically, it
counts tags on the specified channels and determines the time between the first tag since
instantiation and the latest tag. The ratio of the number of tags and the
time corresponds to the average countrate since the first tag.


Arguments
^^^^^^^^^

tagger
  <reference> reference to a time tagger
channels
  <vector int> channels used for counting tags

Methods
^^^^^^^

getData()
  returns the average countrate in counts per second.
clear()
  resets the accumulated counts to zero and uses the next incoming tag as the first tag.

  
  
FLIM
----

Fluorescence-lifetime imaging microscopy or FLIM is an imaging technique
for producing an image based on the differences in the exponential decay rate
of the fluorescence from a sample.

Fluorescence lifetimes can be determined in the time domain by using a pulsed source. When a population
of fluorophores is excited by an ultrashort or delta pulse of light, the time-resolved fluorescence will
decay exponentially.

This measurement implements a line scan in a FLIM image that
consists of a sequence of pixels. This could either represent a single line
of the image, or - if the image is represented as a single meandering line - 
this could represent the entire image.

This measurement is a special case of the more general 'TimeDifferences' measurement.

The measurement successively acquires n histograms
(one for each pixel in the line scan), where each histogram
is determined by the number of bins and the binwidth.


Arguments
^^^^^^^^^

tagger
  <reference> reference to a time tagger
click channel
  <int> channel on which clicks are received
start channel
  <int> channel on which start clicks are received
next_channel 
  <int> channel on which pixel triggers are received
binwidth
  <longlong> binwidth in ps
n_bins
  <int> number of bins in each histogram
n_pixels 
  <int> number of pixels


Methods
^^^^^^^

getData()
  returns a two-dimensional array of size 'n_bins' times 'n_pixels' containing the histograms.
getIndex()
  returns a vector of size 'n_bins' containing the time bins in ps.
clear()
  resets the array to zero.
setMaxCounts() 
  set the maximum number of start tags accepted
getCounts()
  returns the number of start tags
ready()
  returns 'true' when the required number of start tags set by 'setMaxCounts' has been reached
  
  
  
  
Histogram
---------

Accumulate time differences into a histogram. This is a simple multiple start,
multiple stop measurement. This is a special case of the more general 'TimeDifferences' measurement.
Specifically, the measurement waits for clicks on the 'start channel',
and for each start click, it measures the time difference between
the start click and all subsequent clicks on the 'click channel'
and stores them in a histogram.
The histogram range and resolution is specified by the number of bins
and the binwidth specified in ps.
Clicks that fall outside the histogram range are ignored.
Data accumulation is performed independently for all start clicks.
This type of measurement
is frequently referred to as 'multiple start, multiple stop' measurement
and corresponds to a
full auto- or cross-correlation measurement.

Arguments
^^^^^^^^^

tagger
  <reference> reference to a time tagger
click channel
  <int> channel on which clicks are received
start channel
  <int> channel on which start clicks are received
binwidth
  <longlong> binwidth in ps
n_bins
  <int> the number of bins in the histogram


Methods
^^^^^^^

getData()
  returns a one-dimensional array of size n_bins containing the histogram.
getIndex()
  returns a vector of size 'n_bins' containing the time bins in ps.
clear()
  resets the array to zero.
setMaxCounts() 
  set the maximum number of start tags accepted
getCounts()
  returns the number of start tags
ready()
  returns 'true' when the required number of start tags set by 'setMaxCounts' has been reached


StartStop
---------

A simple start-stop measurement. This class performs a start-stop
measurement between two channels and stores the time differences
in a histogram. The histogram resolution
is specified beforehand (binwidth) but the histogram range is unlimited.
It is adapted to the largest time difference that was detected. Thus
all pairs of subsequent clicks are registered.


Arguments
^^^^^^^^^

tagger
  <reference> reference to a time tagger
click_channel
  <int> channel on which stop clicks are received
start_channel
  <int> channel on which start clicks are received
binwidth
  <longlong> binwidth in ps


Methods
^^^^^^^

getData()
  returns a one dimensional array containing the histogram
getIndex()
  returns a vector of the time bins in ps.
clear()
  resets the array to zero and restarts the measurement.
ready() 
  returns 'true' when the entire array is filled.

  
  

TimeDifferences
---------------

A multidimensional histogram measurement optionally with up to three additional channels that control how to
step through the indices of the histogram array. This is a very powerful and generic measurement.
You can use it to record cross-correlation, lifetime measurements, fluorescence lifetime imaging
and many more measurements based on pulsed excitation.
Specifically, the measurement waits for a tag on the 'start_channel', then measures the
time difference between the start tag and all subsequent tags on the 'click_channel'
and stores them in a histogram. If no 'start_channel' is specified, the 'click_channel' is used as 'start_channel'
corresponding to an auto-correlation measurement.
The histogram has a number of 'n_bins' bins of binwidth 'binwidth'. Clicks that fall outside the histogram range are discarded.
Data accumulation is performed independently for all start tags. This type of measurement is frequently referred to as
'single start, multiple stop' measurement and corresponds to a full auto- or cross-correlation measurement.

The data obtained from subsequent start tags can be accumulated into the same histogram (one-dimensional measurement)
or into different histograms (two-dimensional measurement). In this way you can perform more general two-dimensional
time-difference measurements. The parameter 'n_histograms' specifies the number of histograms. After each tag
on the 'next_channel', the histogram index is incremented by one (and reset to zero after reaching the last valid index.
You can also provide a synchronization trigger that resets the histogram index by
specifying a 'sync_channel'.

Typically, you will run the measurement indefinitely until stopped by the user. However, it is also possible to
specify the maximum number of rollovers of the histogram index. In this case the measurement stops when the number of
rollovers has reached the specified value. This means that both for a one-dimensional and for a
two-dimensional measurement, it will measure until every histogram has a seen the specified number of start tags.


Arguments
^^^^^^^^^

tagger
  <reference> reference to a time tagger
click channel 
  <int> channel that increments the count in a bin
start channel 
  <int> channel that sets start times relative to which s on the click channel are measured
next channel 
  <int> channel that increments the histogram index
sync channel 
  <int> channel that resets the histogram index to zero
binwidth 
  <longlong> binwidth in ps
n_bins 
  <int> number of bins in each histogram
n_histograms 
  <int> number of histograms



Methods
^^^^^^^



getData()
  returns a two-dimensional array of size 'n_bins' times 'n_histograms' containing the histograms.
getIndex() 
  returns a vector of size 'n_bins' containing the time bins in ps.
clear()
  resets the array to zero.
setMaxCounts()
  set the maximum number of start clicks accepted
getCounts()
  returns the number of start clicks
ready()
  returns 'true' when the required number of start clicks set by 'setMaxCounts' has been reached







Dump
----


Dump the time tag stream to a file in a binary format.




Arguments
^^^^^^^^^



<str> filename 
  name of the file to dump to




Methods
^^^^^^^


stop()
  stop the measurement
